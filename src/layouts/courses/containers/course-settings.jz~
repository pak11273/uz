import React, {Component} from "react"
import {connect} from "react-redux"
import Helmet from "react-helmet"
import {Can} from "../../../components"
import schema from "../../../core/schema"

import Button from "@material-ui/core/Button"
import Grid from "@material-ui/core/Grid"
import Typography from "@material-ui/core/Typography"
import {withStyles} from "@material-ui/core/styles"

import {graphql} from "react-apollo"
import gql from "graphql-tag"
/* import ModalMgr from "../../../containers/modals/modal-mgr.js" */

const courseUpdate = gql`
  mutation courseUpdate($input: CourseUpdated!) {
    courseUpdate(input: $input) {
      id
      courseMode
    }
  }
`

// actions
import {toggleFooter} from "../../../core/actions/toggle-footer-action.js"
import {openModal} from "../../../containers/modals/actions.js"

const styles = theme => ({
  content: {
    flexGrow: 1,
    padding: theme.spacing.unit * 3
  },
  courseMode: {
    display: "inline-block",
    fontSize: theme.spacing.unit * 3,
    paddingLeft: "20px",
    color: "orange"
  },
  dangerZone: {
    color: "red"
  },
  heroUnit: {
    backgroundColor: theme.palette.background.paper
  },
  heroContent: {
    maxWidth: 600,
    margin: "0 auto",
    padding: `${theme.spacing.unit * 8}px 0 ${theme.spacing.unit * 6}px`
  },
  heroButtons: {
    marginTop: theme.spacing.unit * 4
  },
  root: {
    maxWidth: 900,
    margin: "0 auto"
  }
})

class CourseSettings extends Component {
  state = {name: "", email: "", submittedName: "", submittedEmail: ""}

  componentDidMount() {
    this.props.toggleFooter(false)
  }

  handleChange = (e, {name, value}) => this.setState({[name]: value})

  handlePublish = async () => {
    // publish updates course mode to live
    const result = await this.props.mutate({
      courseMode: "live"
    })
    console.log("result: ", result)
  }

  handleSubmit = () => {
    const {name, email} = this.state

    this.setState({submittedName: name, submittedEmail: email})
  }

  openModalClicked = e => {
    e.preventDefault()
    this.props.openModal("courseModal", null)
  }

  render() {
    /* const {name, email, submittedName, submittedEmail} = this.state */
    const {classes, user, course} = this.props
    return (
      <Can
        roles={user.roles}
        perform="course:read-settings"
        id={user.username}
        matchingID={course.owner.username}
        yes={() => (
          <form className={classes.root} onSubmit={this.handleSubmit}>
            <Helmet>
              <meta charset="utf-8" />
              <meta
                name="viewport"
                content="width=device-width, initial-scale=1, shrink-to-fit=no"
              />
              <meta name="description" content="Affordable language learning" />
              <meta name="author" content="Isaac Pak" />
              <title>Utterzone | Settings</title>
              <link rel="canonical" href="https://utter.zone/settings" />
            </Helmet>
            {/* Hero unit */}
            <div className={classes.heroUnit}>
              <div className={classes.heroContent}>
                <Grid container justify="center" direction="column">
                  <Typography
                    variant="h4"
                    align="center"
                    className={classes.text}
                    gutterBottom>
                    Settings
                  </Typography>
                </Grid>
              </div>
            </div>
            {/* End hero unit */}
            <main className={classes.content}>
              <Grid container spacing={24}>
                {/*  <ModalMgr /> */}
                <Grid item xs={12} md={4}>
                  <Typography
                    variant="h5"
                    align="left"
                    className={classes.text}>
                    Course Mode:
                  </Typography>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Typography align="left" className={classes.courseMode}>
                    {this.props.course.courseMode}
                  </Typography>
                </Grid>
                <Grid item xs={12} md={4}>
                  <Button
                    variant="outlined"
                    style={{
                      backgroundColor: "orange",
                      color: "white",
                      margin: "0 0 0 40px"
                    }}
                    onClick={this.handlePublish}>
                    {this.props.courseMode === "draft" ? "edit" : "publish"}
                  </Button>
                </Grid>
                <Grid item xs={12} style={{backgroundColor: "#3e3e3e"}}>
                  <Typography
                    variant="h6"
                    align="left"
                    className={classes.dangerZone}
                    gutterBottom>
                    Danger Zone
                  </Typography>
                  <Button
                    variant="outlined"
                    style={{
                      backgroundColor: "red",
                      color: "white",
                      margin: "12px"
                    }}>
                    Delete Course {/* TODO: delete all related entities */}
                  </Button>
                </Grid>
                <Grid item xs={12}>
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "flex-end",
                      margin: "50px 0"
                    }}
                  />
                </Grid>
              </Grid>
            </main>
          </form>
        )}
        no={() => <h1>wtf</h1>}
      />
    )
  }
}

const mapStateToProps = state => {
  const session = schema.session(state.apiReducer)
  const {User, Course} = session
  const course = Course.first().ref
  const userObj = User.all().toRefArray()
  var user = userObj[0]
  return {
    user,
    course
  }
}

const actions = {
  openModal,
  toggleFooter
}

const withGraphql = graphql(courseUpdate)(CourseSettings)

export default connect(
  mapStateToProps,
  actions
)(withStyles(styles)(withGraphql))
