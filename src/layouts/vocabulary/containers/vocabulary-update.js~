/* eslint no-unused-vars: 0 */
import React, {Component} from "react"
import ReactTable from "react-table"
import "react-table/react-table.css"
import {connect} from "react-redux"
import schema from "../../../core/schema.js"

import Button from "@material-ui/core/Button"
import CircularProgress from "@material-ui/core/CircularProgress"
import Grid from "@material-ui/core/Grid"
import DeleteIcon from "@material-ui/icons/Delete"
import PlayCircleFilledIcon from "@material-ui/icons/PlayCircleFilled"
import SpeakerIcon from "@material-ui/icons/RecordVoiceOver"
import FormControl from "@material-ui/core/FormControl"
import IconButton from "@material-ui/core/IconButton"
import List from "@material-ui/core/List"
import ListItem from "@material-ui/core/ListItem"
import MenuItem from "@material-ui/core/MenuItem"
import OutlinedInput from "@material-ui/core/OutlinedInput"
import Select from "@material-ui/core/Select"
import TextField from "@material-ui/core/TextField"
import Typography from "@material-ui/core/Typography"
import {withStyles} from "@material-ui/core/styles"

import {Mutation, Query} from "react-apollo"
import gql from "graphql-tag"
import classNames from "classnames"
import isEmpty from "lodash/isEmpty"

import {Can, Hero, LoaderCircle} from "../../../components"
import {VocabularyDeleteModal} from "../components"

import {loadData} from "../../../api/actions.js"
import {getVocabularies, vocabularyCreate} from "../xhr.js"
import {getLevels} from "../../levels/xhr.js"
import {styles} from "../styles.js"

// actions
import {toggleFooter} from "../../../core/actions/toggle-footer-action.js"

class Vocabulary extends Component {
  constructor(props) {
    super(props)

    this.state = {
      formErrors: {
        errors: []
      },
      labelWidth: 0,
      globalLevel: 1,
      value: "level",
      columnDefs: [
        {
          rowDrag: true,
          headerName: ""
        },
        {headerName: "Level", field: "level"},
        {headerName: "Word", field: "word"},
        {headerName: "Translation", field: "translation"},
        {headerName: "Audio", field: "audio"},
        {headerName: "Action", field: ""}
      ],
      rowData: [
        {level: "1", model: "Celica", price: 35000},
        {level: "2", model: "Mondeo", price: 32000},
        {level: "3", model: "Boxter", price: 72000}
      ]
    }
  }

  componentDidMount() {
    this.props.toggleFooter(true)
		// fetch level from glboabl Level
		
    // use redux loadData
    this.props.loadData({level: this.state.globalLevel})
  }

  onButtonClick = () => {
    const selectedNodes = this.gridApi.getSelectedNodes()
    const selectedData = selectedNodes.map(node => node.data)
    const selectedDataStringPresentation = selectedData
      .map(node => node.make + " " + node.model)
      .join(", ")
    alert(`Selected nodes: ${selectedDataStringPresentation}`)
  }

  handleChg = name => e => {
    e.preventDefault()
    this.setState({
      [name]: e.target.value
    })
  }

  render() {
    const {classes, course, level, user} = this.props
    const levelError = classNames({
      errorClass:
        this.state.formErrors.path === "level" &&
        !isEmpty(this.state.formErrors.errors)
    })

    const titleError = classNames({
      errorClass:
        this.state.formErrors.path === "title" &&
        !isEmpty(this.state.formErrors.errors)
    })

    const formErrors = this.state.formErrors.errors.map((error, i) => {
      return (
        <ListItem key={i}>
          <Typography className={classes.errors}>{error}</Typography>
        </ListItem>
      )
    })

    const columns = [
      {
        Header: () => (
          <Can
            roles={user.roles}
            perform="course:update-levels"
            id={user.username}
            matchingID={course.owner.username}
            yes={() => (
              <TextField
                align="center"
                className={`${classes[levelError]} ${classes.inputHeader}`}
                fullWidth
                id="outlined-bare"
                margin="normal"
                name="level"
                onChange={this.onChange}
                value={this.state.level}
                variant="outlined"
              />
            )}
            no={() => null}
          />
        ),
        columns: [
          {
            Header: () => (
              <Typography className={classes.header}>Level</Typography>
            ),
            accessor: "level",
            Cell: row => (
              <Typography className={classes.level}>{row.value}</Typography>
            ),
            minWidth: 20
          }
        ]
      },
      {
        Header: () => (
          <Can
            roles={user.roles}
            perform="course:update-levels"
            id={user.username}
            matchingID={course.owner.username}
            yes={() => (
              <TextField
                className={`${classes[titleError]} ${classes.inputHeader}`}
                fullWidth
                id="outlined-bare"
                margin="normal"
                name="title"
                onChange={this.onChange}
                value={this.state.title}
                variant="outlined"
              />
            )}
            no={() => null}
          />
        ),
        columns: [
          {
            Header: () => (
              <Typography className={classes.header}>Title</Typography>
            ),
            accessor: "title",
            Cell: props => (
              <Typography className={classes.title}>{props.value}</Typography>
            )
          }
        ]
      },
      {
        Header: row => (
          <div className={classes.addButton}>
            <Mutation mutation={vocabularyCreate}>
              {(vocabularyCreate, {loading, error, data}) => {
                return loading ? (
                  <CircularProgress />
                ) : (
                  <Can
                    roles={user.roles}
                    perform="course:update-levels"
                    id={user.username}
                    matchingID={course.owner.username}
                    yes={() => (
                      <Button type="submit" style={{wordBreak: "break-word"}}>
                        Add Word
                      </Button>
                    )}
                    no={() => null}
                  />
                )
              }}
            </Mutation>
          </div>
        ),
        columns: [
          {
            Header: () => (
              <Can
                roles={user.roles}
                perform="course:update-levels"
                id={user.username}
                matchingID={course.owner.username}
                yes={() => (
                  <Typography className={classes.header}>Edit</Typography>
                )}
                no={() => null}
              />
            ),
            Cell: row => (
              <Can
                roles={user.roles}
                perform="course:update-levels"
                id={user.username}
                matchingID={course.owner.username}
                yes={() => (
                  <VocabularyDeleteModal
                    row={row}
                    {...this.state}
                    closeDeleteModal={this.closeDeleteModal}
                    handleDelete={this.handleDelete}
                  />
                )}
                no={() => null}
              />
            ),
            minWidth: 20
          }
        ],
        minWidth: 30
      }
    ]
    return (
      <Query
        errorPolicy="all"
        query={getLevels}
        variables={{
          courseId: course.id
        }}>
        {({loading, error, data}) => {
          if (loading) {
            return <LoaderCircle />
          }
          if (error)
            return (
              <Grid>
                <pre>
                  {error.graphQLErrors.map(({message}, i) => (
                    <p
                      style={{
                        fontSize: "1em",
                        color: "red",
                        margin: "30px",
                        padding: "30px",
                        textAlign: "center"
                      }}
                      key={i}>
                      {message}
                    </p>
                  ))}
                </pre>
              </Grid>
            )

          const {levels} = data.getLevels

					this.props.loadData(levels[0])

          console.log("levels: ", levels)

          return (
            <Grid container direction="column">
              <Hero title="Vocabulary">
                <Grid container alignItems="center" justify="center">
                  <Typography variant="h6" style={{paddingRight: "20px"}}>
                    Choose a level
                  </Typography>
                  <FormControl variant="outlined">
                    <Select
                      value={this.state.globalLevel}
                      className={classes.formControl}
                      onChange={this.handleChg("globalLevel")}>
                      {levels.map(item => {
                        return (
                          <MenuItem key={item.level} value={item.level}>
                            {item.level}
                          </MenuItem>
                        )
                      })}
                    </Select>
                  </FormControl>
                  <Button
                    color="primary"
                    onClick={this.handleSubmit}
                    size="small"
                    style={{margin: "20px"}}
                    type="submit"
                    variant="contained">
                    Submit
                  </Button>
                </Grid>
              </Hero>
              <List>{formErrors}</List>
              <Grid item>
                <ReactTable
                  getTheadThProps={() => {
                    return {style: {outline: 0}}
                  }}
                  className="-striped -highlight"
                  data={[]}
                  columns={columns}
                  defaultPageSize={10}
                />
              </Grid>
              <Grid item style={{display: "flex", justifyContent: "center"}}>
                {/*  <Button
                  variant="contained"
                  color="primary"
                  className={classes.button}
                  type="submit"
                  onClick={this.onButtonClick}
                  size="large">
                  Save
                </Button> */}
              </Grid>
            </Grid>
          )
        }}
      </Query>
    )
  }
}

const mapStateToProps = state => {
  const session = schema.session(state.apiReducer)
  const {User, Course, Level} = session
  const userObj = User.all().toRefArray()
  const courseObj = Course.all().toRefArray()
  const levelObj = Level.all().toRefArray()
  var user = userObj[0]
  var course = courseObj[0]
  var level = levelObj[0]

  return {
    user,
    course,
    level
  }
}

const mapDispatchToProps = dispatch => {
  return {
		loadData,
    toggleFooter: () => dispatch(toggleFooter())
  }
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withStyles(styles)(Vocabulary))
